#!/bin/sh
set -e

. /usr/share/debconf/confmodule

NOVA_COM_DEF=/etc/default/nova-common

# Set the debconf value to whatever is in the config file
if [ -f ${NOVA_COM_DEF} ] ; then
	. ${NOVA_COM_DEF}
fi
if ! [ "${NOVA_ENABLE}" = "true" ] ; then
	NOVA_ENABLE=false
fi
db_set nova-common/start_services ${NOVA_ENABLE}

db_input low nova-common/start_services || true
db_go

# Write a default config file if it doesn't exist yet
# note that the value will be overwritten by the postinst
if ! [ -f ${NOVA_COM_DEF} ] ; then
	echo "# defaults file for nova daemons

# start nova daemons from init.d script?
#  only allowed values are \"true\" and \"false\"
NOVA_ENABLE=true" >${NOVA_COM_DEF}
fi

db_input high nova-common/configure_db || true
db_go

### Reading of values in the nova config file           ###
### and setting default for dbconfig-common accordingly ###
NOVA_CONF=/etc/nova/nova.conf

db_get nova-common/configure_db
if [ "$RET" = "true" ] && [ -f /usr/share/dbconfig-common/dpkg/config ] ; then
	. /usr/share/dbconfig-common/dpkg/config
	if [ -e "${NOVA_CONF}" ] ; then
		NOVA_CONF_DB_CON_INFO=`grep -E "^([ \t])*sql_connection([ \t])*=([ \t])*" ${NOVA_CONF} | awk '{print $3}'`
	else
		NOVA_CONF_DB_CON_INFO="sqlite:///var/lib/nova/novadb"
	fi
	NOVA_CONF_DB_TYPE=${NOVA_CONF_DB_CON_INFO%%:*}
	# If we have an undefined SQL type, we go back to a more sane default (eg: SQLite)
	case "${NOVA_CONF_DB_TYPE}" in
	    sqlite|mysql|pgsql)
		;;
	    postgresql*)
		NOVA_CONF_DB_TYPE=pgsql
		;;
	    *)
		NOVA_CONF_DB_CON_INFO="sqlite:///var/lib/nova/novadb"
		NOVA_CONF_DB_TYPE="sqlite"
	esac
	if [ "${NOVA_CONF_DB_TYPE}" = "sqlite" ] ; then
		# This is the invalid default in the etc/nova.conf in the source package
		if [ "${NOVA_CONF_DB_CON_INFO}" = "sqlite:///nova.db" ] ; then
			NOVA_CONF_DB_CON_INFO="sqlite:///var/lib/nova/novadb"
		fi

		NOVA_CONF_DB_PATH=${NOVA_CONF_DB_CON_INFO#sqlite://}
		if [ -z "${NOVA_CONF_DB_PATH}" ] ; then
			NOVA_CONF_DB_PATH=/var/lib/nova/novadb
		fi
		dbc_basepath=`dirname "${NOVA_CONF_DB_PATH}"`
		dbc_dbname=`basename "${NOVA_CONF_DB_PATH}"`
		dbc_dbtypes="sqlite3, mysql, pgsql"
	else
		# Later, the postinst does: mysql://$dbc_dbuser:$dbc_dbpass@${dbc_dbserver:-localhost}$dbport/$dbc_dbname
		# so we are supposed to parse that if it exists
		NOVA_CONF_ADDR=${NOVA_CONF_DB_CON_INFO#*sql://}
		NOVA_CONF_BEFORE_AT=${NOVA_CONF_ADDR%%@*}
		NOVA_CONF_AFTER_AT=${NOVA_CONF_ADDR#*@}

		NOVA_CONF_USER=${NOVA_CONF_BEFORE_AT%%:*}
		NOVA_CONF_PASS=${NOVA_CONF_BEFORE_AT#*:}
		NOVA_CONF_SERVER_PORT=${NOVA_CONF_AFTER_AT%%/*}
		NOVA_CONF_DB_NAME=${NOVA_CONF_AFTER_AT#*/}

		NOVA_CONF_SERVER=${NOVA_CONF_SERVER_PORT%%:*}
		case "${NOVA_CONF_SERVER_PORT}" in
		    *:*)
			NOVA_CONF_SERVER=${NOVA_CONF_SERVER_PORT#*:}
			;;
		    *)
			NOVA_CONF_PORT=""
		esac

		if [ -n "${NOVA_CONF_USER}" ] && [ -n "${NOVA_CONF_PASS}" ] && [ -n "${NOVA_CONF_SERVER}" ] && [ -n "${NOVA_CONF_DB_NAME}" ] ; then
			dbc_dbuser=${NOVA_CONF_USER}
			dbc_dbpass=${NOVA_CONF_PASS}
			dbc_dbserver=${NOVA_CONF_SERVER}
			dbc_dbport=${NOVA_CONF_PORT}
			if [ "${NOVA_CONF_DB_NAME}" = "novadb" ] ; then
				dbc_dbname="nova"
			else
				dbc_dbname=${NOVA_CONF_DB_NAME}
			fi
		fi
		if [ "${NOVA_CONF_DB_TYPE}" = "mysql" ] ; then
			dbc_dbtypes="mysql, pgsql, sqlite3"
		else
			dbc_dbtypes="pgsql, mysql, sqlite3"
		fi
		db_authmethod_user="password"
	fi
	dbc_go nova-common $@
fi

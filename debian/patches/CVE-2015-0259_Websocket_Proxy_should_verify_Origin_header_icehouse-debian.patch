Description: Websocket Proxy should verify Origin header
 If the Origin HTTP header passed in the WebSocket handshake does not match the
 host, this could indicate an attempt at a cross-site attack.  This commit adds
 a check to verify the origin matches the host.
 .
 Note from maintainer: the final patch is a mix-up of both this one:
  https://review.openstack.org/#/c/163035/ (for Icehouse)
 and this one:
  https://review.openstack.org/#/c/163034/
 as Nova Icehouse in Debian is patched to work with Websockify 0.6.
Author: Dave McCowan <dmccowan@cisco.com>
Date: Wed, 25 Feb 2015 02:33:58 +0000 (-0500)
X-Git-Url: https://review.openstack.org/gitweb?p=openstack%2Fnova.git;a=commitdiff_plain;h=231fa2c9d52dd080ccb1921e8af180fc2507e8f3
Change-Id: Ica6ec23d6f69a236657d5ba0c3f51b693c633649
Bug-Ubuntu: https://bugs.launchpad.net/nova/+bug/1409142
Bug-Debian: https://bugs.debian.org/780250
Last-Update: 2015-03-11

--- nova-2014.1.3.orig/nova/console/websocketproxy.py
+++ nova-2014.1.3/nova/console/websocketproxy.py
@@ -20,18 +20,40 @@ Leverages websockify.py by Joel Martin
 
 import Cookie
 import socket
+import urlparse
 
 import websockify
 
 from nova.consoleauth import rpcapi as consoleauth_rpcapi
 from nova import context
+from nova import exception
 from nova.openstack.common.gettextutils import _
 from nova.openstack.common import log as logging
+from oslo.config import cfg
 
 LOG = logging.getLogger(__name__)
 
+CONF = cfg.CONF
+CONF.import_opt('novncproxy_base_url', 'nova.vnc')
+CONF.import_opt('html5proxy_base_url', 'nova.spice', group='spice')
+CONF.import_opt('vnc_enabled', 'nova.vnc')
+CONF.import_opt('enabled', 'nova.spice', group='spice')
 
 class NovaProxyRequestHandlerBase(object):
+    def verify_origin_proto(self, console_type, origin_proto):
+        if console_type == 'novnc':
+            expected_proto = \
+                urlparse.urlparse(CONF.novncproxy_base_url).scheme
+        elif console_type == 'spice-html5':
+            expected_proto = \
+                urlparse.urlparse(CONF.spice.html5proxy_base_url).scheme
+        else:
+            detail = _("Invalid Console Type for WebSocketProxy: '%s'") % \
+                        console_type
+            LOG.audit(detail)
+            raise exception.ValidationError(detail=detail)
+        return origin_proto == expected_proto
+
     def new_websocket_client(self):
         """Called after a new WebSocket connection has been established."""
         # Reopen the eventlet hub to make sure we don't share an epoll
@@ -49,6 +71,23 @@ class NovaProxyRequestHandlerBase(object
         if not connect_info:
             raise Exception(_("Invalid Token"))
 
+        # Verify Origin
+        expected_origin_netloc = self.headers.getheader('Host')
+        origin_url = self.headers.getheader('Origin')
+        origin = urlparse.urlparse(origin_url)
+        origin_netloc = origin.netloc
+        origin_scheme = origin.scheme
+        if origin_netloc == '' or origin_scheme == '':
+            detail = _("Origin header not valid.")
+            raise exception.ValidationError(detail=detail)
+        if expected_origin_netloc != origin_netloc:
+            detail = _("Origin header does not match this host.")
+            raise exception.ValidationError(detail=detail)
+        if not self.verify_origin_proto(connect_info['console_type'],
+                                          origin.scheme):
+            detail = _("Origin header protocol does not match this host.")
+            raise exception.ValidationError(detail=detail)
+
         self.msg(_('connect info: %s'), str(connect_info))
         host = connect_info['host']
         port = int(connect_info['port'])

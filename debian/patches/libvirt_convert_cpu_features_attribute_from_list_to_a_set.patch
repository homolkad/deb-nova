Description: libvirt: convert cpu features attribute from list to a set
 Currently, the cpu features list which is being sent to libvirt, when creating
 a domain or calling compareCPU, must contain only unique entries. Multiple
 issues arise when we are updating the features attribute in LibvirtConfigCPU
 class (for example during migration).
 .
 This change will change the features attribute from being a list to a set.
 This make the LibvirtConfigCPU class keep only unique features. Adjusting the
 LibvirtConfigCPUFeature class to support set operations by overriding the
 __eq__, __ne__ and __hash__ methods.
Bug-Ubuntu: https://launchpad.net/bugs/1303536
Author: Vladik Romanovsky <vladik.romanovsky@enovance.com>
Origin: upstream, https://review.openstack.org/#/c/100632/
Date: Tue, 3 Jun 2014 18:58:06 +0000 (-0400)
X-Git-Url: https://review.openstack.org/gitweb?p=openstack%2Fnova.git;a=commitdiff_plain;h=f154a9c82a956a1909444fea7be65d8b3d3796e6
Last-Update: 2014-06-18

Index: nova/nova/tests/virt/libvirt/test_libvirt.py
===================================================================
--- nova.orig/nova/tests/virt/libvirt/test_libvirt.py	2014-08-30 14:13:12.000000000 +0800
+++ nova/nova/tests/virt/libvirt/test_libvirt.py	2014-08-30 14:13:15.000000000 +0800
@@ -2250,8 +2250,8 @@
             cpu.model = "Opteron_G4"
             cpu.vendor = "AMD"
 
-            cpu.features.append(vconfig.LibvirtConfigGuestCPUFeature("tm2"))
-            cpu.features.append(vconfig.LibvirtConfigGuestCPUFeature("ht"))
+            cpu.add_feature(vconfig.LibvirtConfigGuestCPUFeature("tm2"))
+            cpu.add_feature(vconfig.LibvirtConfigGuestCPUFeature("ht"))
 
             caps = vconfig.LibvirtConfigCaps()
             caps.host = vconfig.LibvirtConfigCapsHost()
@@ -2279,8 +2279,8 @@
         self.assertEqual(conf.cpu.model, "Opteron_G4")
         self.assertEqual(conf.cpu.vendor, "AMD")
         self.assertEqual(len(conf.cpu.features), 2)
-        self.assertEqual(conf.cpu.features[0].name, "tm2")
-        self.assertEqual(conf.cpu.features[1].name, "ht")
+        self.assertEqual(conf.cpu.features.pop().name, "tm2")
+        self.assertEqual(conf.cpu.features.pop().name, "ht")
 
     def test_get_guest_cpu_config_custom_old(self):
         def get_lib_version_stub():
Index: nova/nova/tests/virt/libvirt/test_libvirt_config.py
===================================================================
--- nova.orig/nova/tests/virt/libvirt/test_libvirt_config.py	2014-08-30 14:12:55.000000000 +0800
+++ nova/nova/tests/virt/libvirt/test_libvirt_config.py	2014-08-30 14:13:15.000000000 +0800
@@ -235,8 +235,30 @@
               <arch>x86_64</arch>
               <model>Penryn</model>
               <vendor>Intel</vendor>
+              <feature name="apic"/>
               <feature name="mtrr"/>
+            </cpu>
+        """)
+
+    def test_only_uniq_cpu_featues(self):
+        obj = config.LibvirtConfigCPU()
+        obj.model = "Penryn"
+        obj.vendor = "Intel"
+        obj.arch = "x86_64"
+
+        obj.add_feature(config.LibvirtConfigCPUFeature("mtrr"))
+        obj.add_feature(config.LibvirtConfigCPUFeature("apic"))
+        obj.add_feature(config.LibvirtConfigCPUFeature("apic"))
+        obj.add_feature(config.LibvirtConfigCPUFeature("mtrr"))
+
+        xml = obj.to_xml()
+        self.assertXmlEqual(xml, """
+            <cpu>
+              <arch>x86_64</arch>
+              <model>Penryn</model>
+              <vendor>Intel</vendor>
               <feature name="apic"/>
+              <feature name="mtrr"/>
             </cpu>
         """)
 
@@ -285,8 +307,8 @@
               <arch>x86_64</arch>
               <model>Penryn</model>
               <vendor>Intel</vendor>
-              <feature name="mtrr" policy="require"/>
               <feature name="apic" policy="require"/>
+              <feature name="mtrr" policy="require"/>
             </cpu>
         """)
 
Index: nova/nova/virt/libvirt/config.py
===================================================================
--- nova.orig/nova/virt/libvirt/config.py	2014-08-30 14:12:55.000000000 +0800
+++ nova/nova/virt/libvirt/config.py	2014-08-30 14:13:15.000000000 +0800
@@ -250,6 +250,15 @@
 
         return ft
 
+    def __eq__(self, obj):
+        return obj.name == self.name
+
+    def __ne__(self, obj):
+        return obj.name != self.name
+
+    def __hash__(self):
+        return hash(self.name)
+
 
 class LibvirtConfigCPU(LibvirtConfigObject):
 
@@ -265,7 +274,7 @@
         self.cores = None
         self.threads = None
 
-        self.features = []
+        self.features = set()
 
     def parse_dom(self, xmldoc):
         super(LibvirtConfigCPU, self).parse_dom(xmldoc)
@@ -305,13 +314,14 @@
             top.set("threads", str(self.threads))
             cpu.append(top)
 
-        for f in self.features:
+        # sorting the features to allow more predictable tests
+        for f in sorted(self.features, key=lambda x: x.name):
             cpu.append(f.format_dom())
 
         return cpu
 
     def add_feature(self, feat):
-        self.features.append(feat)
+        self.features.add(feat)
 
 
 class LibvirtConfigGuestCPUFeature(LibvirtConfigCPUFeature):
Index: nova/nova/virt/libvirt/driver.py
===================================================================
--- nova.orig/nova/virt/libvirt/driver.py	2014-08-30 14:13:12.000000000 +0800
+++ nova/nova/virt/libvirt/driver.py	2014-08-30 14:13:15.000000000 +0800
@@ -2922,7 +2922,7 @@
         for hostfeat in hostcpu.features:
             guestfeat = vconfig.LibvirtConfigGuestCPUFeature(hostfeat.name)
             guestfeat.policy = "require"
-            guestcpu.features.append(guestfeat)
+            guestcpu.add_feature(guestfeat)
 
         return guestcpu
 
